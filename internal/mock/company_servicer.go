// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/djurica-surla/golang-exercise/internal/transport/http (interfaces: CompanyServicer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/djurica-surla/golang-exercise/internal/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCompanyServicer is a mock of CompanyServicer interface.
type MockCompanyServicer struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyServicerMockRecorder
}

// MockCompanyServicerMockRecorder is the mock recorder for MockCompanyServicer.
type MockCompanyServicerMockRecorder struct {
	mock *MockCompanyServicer
}

// NewMockCompanyServicer creates a new mock instance.
func NewMockCompanyServicer(ctrl *gomock.Controller) *MockCompanyServicer {
	mock := &MockCompanyServicer{ctrl: ctrl}
	mock.recorder = &MockCompanyServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyServicer) EXPECT() *MockCompanyServicerMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockCompanyServicer) CreateCompany(arg0 context.Context, arg1 model.CompanyCreate) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockCompanyServicerMockRecorder) CreateCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockCompanyServicer)(nil).CreateCompany), arg0, arg1)
}

// DeleteCompany mocks base method.
func (m *MockCompanyServicer) DeleteCompany(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompany", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompany indicates an expected call of DeleteCompany.
func (mr *MockCompanyServicerMockRecorder) DeleteCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompany", reflect.TypeOf((*MockCompanyServicer)(nil).DeleteCompany), arg0, arg1)
}

// GetCompanyByID mocks base method.
func (m *MockCompanyServicer) GetCompanyByID(arg0 context.Context, arg1 uuid.UUID) (model.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByID", arg0, arg1)
	ret0, _ := ret[0].(model.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByID indicates an expected call of GetCompanyByID.
func (mr *MockCompanyServicerMockRecorder) GetCompanyByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByID", reflect.TypeOf((*MockCompanyServicer)(nil).GetCompanyByID), arg0, arg1)
}

// UpdateCompany mocks base method.
func (m *MockCompanyServicer) UpdateCompany(arg0 context.Context, arg1 model.CompanyCreate, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompany", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompany indicates an expected call of UpdateCompany.
func (mr *MockCompanyServicerMockRecorder) UpdateCompany(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompany", reflect.TypeOf((*MockCompanyServicer)(nil).UpdateCompany), arg0, arg1, arg2)
}
